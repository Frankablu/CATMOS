

import "networkSettings.eol";

var runTool = new Native("org.eclipse.epsilon.examples.tools.RunTool");

var capNo : Integer = 0;
var measureNo : Integer = 0;

var throughLife : Boolean = (ThroughLifePlanning.all().size() > 0);

runTool.connectToNetworkClient(getAddress(), getPort());

runTool.sendRaw(getPreamble());

var scenarioName : String = scenario!RunConfiguration.all().first.name;
var luaFileName : String = "/"+scenarioName+"/"+scenarioName+".lua";

runTool.sendCommand("start");

var base : Real = 0;

if (throughLife)
{
	if (ThroughLifePlanning.all().first.startDate.isInteger() == false)
	{
		base = runTool.convertDateTime(ThroughLifePlanning.all().first.startDate);
	}
	else
	{
		base = ThroughLifePlanning.all().first.startDate.asReal();
	}

	runTool.startCommandList();
	runTool.addCommand("throughlife"); //Server accepts additional arguments for creation calls for scheduling purposes
	runTool.addCommand("0");
	runTool.addCommand(ThroughLifePlanning.all().first.endDate.convert(base));
	runTool.sendCommands();
}

luaFileName.println();
if (runTool.pokeFile(luaFileName))
{
	"Adding Lua Script".println();
	runTool.startCommandList();
	runTool.addCommand("talkToLua");
	runTool.addCommand(runTool.readFileNoLineReturns(luaFileName));
	runTool.readFileNoLineReturns(luaFileName).println();
	runTool.sendCommands();
}

//Quick Fix - Decomposes implies standAlone
for (cap in Capability.all().select(x|x.isTypeOf(Capability)))
{
	if (cap.decomposes.size() > 0)
	{
		cap.standAlone = true;
	}
}

//Scenario Capabilities First
for (cap in Capability.all().select(x|x.isTypeOf(Capability)))
{
	if (Component.all().collect(x|x.requires).flatten().contains(cap) == false)
	{
		if (throughLife == false)
		{
			runTool.createCapability(cap.name,cap.searchObjective==true, cap.standAlone == true, false);
		}
		else
		{
			runTool.startCommandList();
			if (cap.searchObjective==true)
			{
				runTool.addCommand("createCapabilitySO");
				runTool.addCommand(cap.name);
				if (cap.standAlone == true)
				{
					runTool.addCommand("true");
				}
				else
				{
					runTool.addCommand("false");
				}
				runTool.addCommand(cap.startDate.convert(base));
				runTool.addCommand(cap.endDate.convert(base));
			}
			else
			{
				runTool.addCommand("createScenarioCapability");
				
				runTool.addCommand(cap.name);
				if (cap.standAlone == true)
				{
					runTool.addCommand("true");
				}
				else
				{
					runTool.addCommand("false");
				}
				
				runTool.addCommand(cap.startDate.convert(base));
				runTool.addCommand(cap.endDate.convert(base));
			}
			runTool.sendCommands();
		}
		
		//Measures For Each Cap
		cap.measurements.createAllMeasurements(cap);
	}
}

//Components - Notice Creating a Component Disables Creating Any More Scenario Capabilities
for (ourComponent in Component.all())
{
	//Decide How Many Times We Need To Make The Component
	var times : Integer = 1;
	var componentDetails : ComponentU = ComponentU.all().selectOne(x|x.name==ourComponent.name);
	
	if (componentDetails <> null)
	{
		times = componentDetails.quantity;
	}
	
	if (times <> 0)
	{
	
	for (componentUsage in 1.to(times))
	{
		var existing : Boolean = false;
		
		runTool.startCommandList();
		if (componentDetails.isTypeOf(ExistingComponent))
		{
			runTool.addCommand("createExistingComponent");
			existing = true;
		}
		else
		{
			runTool.addCommand("createAcquirableComponent");
		}
		
		
		if (existing)
		{
			runTool.addCommand(ourComponent.name+":E"+componentUsage.asString());
		}
		else
		{
			runTool.addCommand(ourComponent.name+":"+componentUsage.asString());
		}
		
		if (throughLife == true and componentDetails.isTypeOf(ExistingComponent))
		{
			runTool.addCommand(componentDetails.startDate.convert(base));
			runTool.addCommand(componentDetails.endDate.convert(base));
		}
		
		if (throughLife == true and componentDetails.isTypeOf(AcquirableComponent))
		{
			runTool.addCommand(componentDetails.acquisitionTime.convertDuration());
			runTool.addCommand(componentDetails.lifeSpan.convertDuration());
		}
		
		runTool.sendCommands();
        
        for (provision in ourComponent.provides)
        {
        	var reuse : Any = provision.reuse;
        	if (reuse == null)
        	{
        		reuse = 0;
        	}
        	runTool.createCapabilityProvision(provision.name,reuse.asString());
      		
        	provision.measurements.createAllMeasurements(null);
        }
        
        for (dependency in ourComponent.requires)
        {
        	runTool.createCapability(dependency.name,dependency.searchObjective==true, dependency.standAlone==true, dependency.sequentialScheduling == true);
        	
        	dependency.measurements.createAllMeasurements(null);
        }
        for (upgrade in ourComponent.upgrades)
        {
        	//Okay need to find out what is avaliable to upgrade
        	var existingTargets : scenario!ExistingComponent = scenario!ExistingComponent.all().selectOne(x|x.name==upgrade.targetComponent);
        	var acquirableTargets : scenario!AcquirableComponent = scenario!AcquirableComponent.all().selectOne(x|x.name==upgrade.targetComponent);
        	
        	var targetTag : String;
        	targetTag = upgrade.targetComponent;
        	
        	//Upgrade Existing Before Acquirable
        	if (existingTargets <> null)
        	{
        	if (componentUsage <= existingTargets.quantity)
        	{
        		targetTag = targetTag + ":E" + componentUsage;
        	}
        	else
        	{
        		targetTag = targetTag + ":" + (componentUsage-existingTargets.quantity);
        	}
        	}
        	else
        	{
        		targetTag = targetTag + ":" + componentUsage;
        	}
        	
        	runTool.createCapabilityUpgrade(upgrade.name, targetTag);
        	
        	for (capabilityChange in upgrade.capabilityChanges)
        	{
        		runTool.sendCommand(capabilityChange.name);
        		
        		for (provision in capabilityChange.capabilities)
        		{
        			var reuse : Any = provision.reuse;
        			if (reuse == null)
        			{
        				reuse = 0;
        			}
        			runTool.createCapabilityProvision(provision.name,reuse.asString());
        			provision.measurements.createAllMeasurements(null);
        		}
        	}
        	
        	runTool.sendCommand("end");
        }
        if (componentDetails.isTypeOf(AcquirableComponent))
        {
        for (cost in ourComponent.costs)
        {
        	if (throughLife == false)
        	{
        		runTool.createCost(cost.name,cost.amount.asString());
        	}
        	else
        	{
        		runTool.startCommandList();
        		runTool.addCommand("createCost");
        		runTool.addCommand(cost.name);
        		runTool.addCommand(cost.amount.asString());
        		
        		if (cost.startAfter <> null)
        		{
        			runTool.addCommand(cost.startAfter.convertDuration());
        		}
        		else
        		{
        			runTool.addCommand("0");
        		}
        		
        		if (cost.repeatDuration <> null)
        		{
        			runTool.addCommand(cost.repeatDuration.convertDuration());
        			
        			if (cost.stopAfter <> null)
        			{
        				 runTool.addCommand(cost.stopAfter.convertDuration());
        			}
        			else
        			{
        				runTool.addCommand((cost.startAfter.convertDuration().asReal() - 1).asString());
        			}
        		}
        		else
        		{
        			runTool.addCommand("0");
        			runTool.addCommand("0");
        		}
        		
        		runTool.sendCommands();
        	}
        }
        }
    }
    }
}

for (entry in QualitativeValueDictionary.all())
{
     if (entry.greaterThan <> null)
     {
     	runTool.createQVD(entry.name, entry.greaterThan.name);
     }
}


for (income in Budget.all())
{
	runTool.startCommandList();
	runTool.addCommand("createIncome");
	runTool.addCommand(income.name);
	runTool.addCommand(income.amount.asString());
	
	if (income.startDate <> null)
	{
		runTool.addCommand(income.startDate.convert(base));
	}
	else
	{
		runTool.addCommand("0");
	}
	
	if (income.repeatDuration <> null)
	{
		runTool.addCommand(income.repeatDuration.convertDuration());
		
		if (income.endDate <> null)
		{
			runTool.addCommand(income.endDate.convert(base));
		}
		else
		{
			runTool.addCommand((income.startDate.convert(base).asReal() - 1).asString());
		}
	}
	else
	{
		runTool.addCommand("0");
		runTool.addCommand(income.startDate.convert(base));
	}
	runTool.sendCommands();
}

for (desire in DesireLow.all())
{
	runTool.startCommandList();
	runTool.addCommand("desireLow");
	runTool.addCommand(desire.name);
	runTool.sendCommands();
}

for (desire in DesireHigh.all())
{
	runTool.startCommandList();
	runTool.addCommand("desireHigh");
	runTool.addCommand(desire.name);
	runTool.sendCommands();
}


runTool.startCommandList();
runTool.addCommand("startGA");
runTool.addCommand(RunConfiguration.all().first.popSize.asString());
runTool.addCommand(RunConfiguration.all().first.genCount.asString());
runTool.sendCommands();



operation Collection createAllMeasurements(cap : Capability)
{
	var acc : Boolean;
	for (measurement in self)
    {
    	acc = false;
    	
    	if (cap <> null and cap.accumulation <> null and cap.accumulation.name==measurement.name)
    	{
    		acc = true;
    	}
    	
    	if (measurement.script == null)
    	{
    		measurement.script = "";
    	}
    
    	if (measurement.criticalValue <> null or measurement.providedValue <> null)
       	{
        	runTool.createMeasurement(measurement.name,measurement.criticalValue.asString(),measurement.benchmarkValue.asString(),measurement.providedValue.asString(),measurement.script,acc);
        }
        else
        {
        	var criticalValues : String = "";
        	var benchmarkValues : String = "";
        	var providedValues : String = "";
        	
        	var loop : Integer = 0;
        	for (value in measurement.criticalValues)
        	{
        			loop = loop + 1;
        			criticalValues = criticalValues + value.name;
        			if (loop < measurement.criticalValues.size())
        			{
        				criticalValues = criticalValues + ",";
        			}
        	}
        	
        	loop = 0;
        	for (value in measurement.benchmarkValues)
        	{
        			loop = loop + 1;
        			benchmarkValues = benchmarkValues + value.name;
        			if (loop < measurement.benchmarkValues.size())
        			{
        				benchmarkValues = benchmarkValues + ",";
        			}
        	}
        	
        	loop = 0;
        	for (value in measurement.providedValues)
        	{
        			loop = loop + 1;
        			providedValues = providedValues + value.name;
        			if (loop < measurement.criticalValues.size())
        			{
        				providedValues = providedValues + ",";
        			}
        	}
        	
        	runTool.createMeasurement(measurement.name,criticalValues,benchmarkValues,providedValues,measurement.script,acc);
		}
    }
}


operation String convert(base : Real)
{
	var runTool = new Native("org.eclipse.epsilon.examples.tools.RunTool");
	if (self.isInteger())
	{
		return (self.asInteger() - base).asString();
	}
	
	if (self == "inf" or self == "infinite")
	{
		return ThroughLifePlanning.all().first.endDate.convert(base);
	}
	
	return ((runTool.convertDateTime(self) - base) / (1000 * 60 * 60 * 24)).asString(); //Nearest Day
}

operation String convertDuration()
{
	var splitDur : Collection = self.split(" ");
	var days : Integer;
	
	if (self == null)
	{
		return "";
	}
	
	if (self <> "inf" and self <> "infinite")
	{
		days = splitDur.first().asInteger();
		
		if (splitDur.last() == "weeks")
		{
			days = days * 7;
		}
		
		if (splitDur.last() == "months")
		{
			days = days * 30;
		}
		
		if (splitDur.last() == "years")
		{
			days = days * 365;
		}
		
	}
	
	if (self == "inf" or self == "infinite")
	{
		return ThroughLifePlanning.all().first.endDate.convert(base); //Total Run Time, I.e It will expire after the evaluation is finished
	}
	
	return days.asString();
}

