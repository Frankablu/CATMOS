/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package ScenarioModel.provider;

import ScenarioModel.util.ScenarioModelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScenarioModelItemProviderAdapterFactory extends ScenarioModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScenarioModelItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.Scenario} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScenarioItemProvider scenarioItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.Scenario}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createScenarioAdapter()
  {
    if (scenarioItemProvider == null)
    {
      scenarioItemProvider = new ScenarioItemProvider(this);
    }

    return scenarioItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.OurObject} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OurObjectItemProvider ourObjectItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.OurObject}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOurObjectAdapter()
  {
    if (ourObjectItemProvider == null)
    {
      ourObjectItemProvider = new OurObjectItemProvider(this);
    }

    return ourObjectItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.Capability} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CapabilityItemProvider capabilityItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.Capability}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCapabilityAdapter()
  {
    if (capabilityItemProvider == null)
    {
      capabilityItemProvider = new CapabilityItemProvider(this);
    }

    return capabilityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.CapabilityProvision} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CapabilityProvisionItemProvider capabilityProvisionItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.CapabilityProvision}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCapabilityProvisionAdapter()
  {
    if (capabilityProvisionItemProvider == null)
    {
      capabilityProvisionItemProvider = new CapabilityProvisionItemProvider(this);
    }

    return capabilityProvisionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.Measurement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MeasurementItemProvider measurementItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.Measurement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMeasurementAdapter()
  {
    if (measurementItemProvider == null)
    {
      measurementItemProvider = new MeasurementItemProvider(this);
    }

    return measurementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.QualitativeValue} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QualitativeValueItemProvider qualitativeValueItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.QualitativeValue}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createQualitativeValueAdapter()
  {
    if (qualitativeValueItemProvider == null)
    {
      qualitativeValueItemProvider = new QualitativeValueItemProvider(this);
    }

    return qualitativeValueItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.QualitativeValueDictionary} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QualitativeValueDictionaryItemProvider qualitativeValueDictionaryItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.QualitativeValueDictionary}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createQualitativeValueDictionaryAdapter()
  {
    if (qualitativeValueDictionaryItemProvider == null)
    {
      qualitativeValueDictionaryItemProvider = new QualitativeValueDictionaryItemProvider(this);
    }

    return qualitativeValueDictionaryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.Component} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentItemProvider componentItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.Component}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComponentAdapter()
  {
    if (componentItemProvider == null)
    {
      componentItemProvider = new ComponentItemProvider(this);
    }

    return componentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.Cost} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CostItemProvider costItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.Cost}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCostAdapter()
  {
    if (costItemProvider == null)
    {
      costItemProvider = new CostItemProvider(this);
    }

    return costItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.CapabilityUpgrade} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CapabilityUpgradeItemProvider capabilityUpgradeItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.CapabilityUpgrade}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCapabilityUpgradeAdapter()
  {
    if (capabilityUpgradeItemProvider == null)
    {
      capabilityUpgradeItemProvider = new CapabilityUpgradeItemProvider(this);
    }

    return capabilityUpgradeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.CapabilityChange} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CapabilityChangeItemProvider capabilityChangeItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.CapabilityChange}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCapabilityChangeAdapter()
  {
    if (capabilityChangeItemProvider == null)
    {
      capabilityChangeItemProvider = new CapabilityChangeItemProvider(this);
    }

    return capabilityChangeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.RunConfiguration} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RunConfigurationItemProvider runConfigurationItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.RunConfiguration}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRunConfigurationAdapter()
  {
    if (runConfigurationItemProvider == null)
    {
      runConfigurationItemProvider = new RunConfigurationItemProvider(this);
    }

    return runConfigurationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.FindTradeOffs} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FindTradeOffsItemProvider findTradeOffsItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.FindTradeOffs}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFindTradeOffsAdapter()
  {
    if (findTradeOffsItemProvider == null)
    {
      findTradeOffsItemProvider = new FindTradeOffsItemProvider(this);
    }

    return findTradeOffsItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.ThroughLifePlanning} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ThroughLifePlanningItemProvider throughLifePlanningItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.ThroughLifePlanning}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createThroughLifePlanningAdapter()
  {
    if (throughLifePlanningItemProvider == null)
    {
      throughLifePlanningItemProvider = new ThroughLifePlanningItemProvider(this);
    }

    return throughLifePlanningItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.ComponentU} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentUItemProvider componentUItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.ComponentU}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createComponentUAdapter()
  {
    if (componentUItemProvider == null)
    {
      componentUItemProvider = new ComponentUItemProvider(this);
    }

    return componentUItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.ExistingComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExistingComponentItemProvider existingComponentItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.ExistingComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExistingComponentAdapter()
  {
    if (existingComponentItemProvider == null)
    {
      existingComponentItemProvider = new ExistingComponentItemProvider(this);
    }

    return existingComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.AcquirableComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AcquirableComponentItemProvider acquirableComponentItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.AcquirableComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAcquirableComponentAdapter()
  {
    if (acquirableComponentItemProvider == null)
    {
      acquirableComponentItemProvider = new AcquirableComponentItemProvider(this);
    }

    return acquirableComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.Constraint} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstraintItemProvider constraintItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.Constraint}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConstraintAdapter()
  {
    if (constraintItemProvider == null)
    {
      constraintItemProvider = new ConstraintItemProvider(this);
    }

    return constraintItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.DesireHigh} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DesireHighItemProvider desireHighItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.DesireHigh}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDesireHighAdapter()
  {
    if (desireHighItemProvider == null)
    {
      desireHighItemProvider = new DesireHighItemProvider(this);
    }

    return desireHighItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.DesireLow} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DesireLowItemProvider desireLowItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.DesireLow}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDesireLowAdapter()
  {
    if (desireLowItemProvider == null)
    {
      desireLowItemProvider = new DesireLowItemProvider(this);
    }

    return desireLowItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link ScenarioModel.Budget} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BudgetItemProvider budgetItemProvider;

  /**
   * This creates an adapter for a {@link ScenarioModel.Budget}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBudgetAdapter()
  {
    if (budgetItemProvider == null)
    {
      budgetItemProvider = new BudgetItemProvider(this);
    }

    return budgetItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (scenarioItemProvider != null) scenarioItemProvider.dispose();
    if (ourObjectItemProvider != null) ourObjectItemProvider.dispose();
    if (capabilityItemProvider != null) capabilityItemProvider.dispose();
    if (capabilityProvisionItemProvider != null) capabilityProvisionItemProvider.dispose();
    if (measurementItemProvider != null) measurementItemProvider.dispose();
    if (qualitativeValueItemProvider != null) qualitativeValueItemProvider.dispose();
    if (qualitativeValueDictionaryItemProvider != null) qualitativeValueDictionaryItemProvider.dispose();
    if (componentItemProvider != null) componentItemProvider.dispose();
    if (costItemProvider != null) costItemProvider.dispose();
    if (capabilityUpgradeItemProvider != null) capabilityUpgradeItemProvider.dispose();
    if (capabilityChangeItemProvider != null) capabilityChangeItemProvider.dispose();
    if (runConfigurationItemProvider != null) runConfigurationItemProvider.dispose();
    if (findTradeOffsItemProvider != null) findTradeOffsItemProvider.dispose();
    if (throughLifePlanningItemProvider != null) throughLifePlanningItemProvider.dispose();
    if (componentUItemProvider != null) componentUItemProvider.dispose();
    if (existingComponentItemProvider != null) existingComponentItemProvider.dispose();
    if (acquirableComponentItemProvider != null) acquirableComponentItemProvider.dispose();
    if (constraintItemProvider != null) constraintItemProvider.dispose();
    if (desireHighItemProvider != null) desireHighItemProvider.dispose();
    if (desireLowItemProvider != null) desireLowItemProvider.dispose();
    if (budgetItemProvider != null) budgetItemProvider.dispose();
  }

}
