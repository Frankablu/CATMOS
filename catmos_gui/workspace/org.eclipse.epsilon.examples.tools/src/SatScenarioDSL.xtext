// automatically generated by Xtext
grammar org.xtext.SatScenario with org.eclipse.xtext.common.Terminals

import "simpleSatScenariomodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Scenario returns Scenario:
	{Scenario}
		(objects+=Object ( objects+=Object)* )?
	;

Object returns Object:
	Object_Impl | Capability | CapabilityProvision | SystemPropertyChecker | QualitativeValueDictionary | Component | RunConfiguration;


Object_Impl returns Object:
	{Object}
	'Object'
	;

Capability returns Capability:
	{Capability}
	(searchObjective?='searchObjective')?
	'Capability'
	name=EString
	'{'
		( measurements+=Measurement ( measurements+=Measurement)*  )?
		('decomposes' '(' decomposes+=[Capability|EString] ( "," decomposes+=[Capability|EString])* ')' )?
	'}';
	
CapabilityProvision returns CapabilityProvision:
	{CapabilityProvision}
	(searchObjective?='searchObjective')?
	'CapabilityProvision'
	name=EString
	'{'
		('reuse' reuse=EIntegerObject)?
		( measurements+=Measurement ( measurements+=Measurement)*  )?
	'}';

SystemPropertyChecker returns SystemPropertyChecker:
	{SystemPropertyChecker}
	(searchObjective?='searchObjective')?
	'SystemPropertyChecker'
	name=EString
	'{'
		('scriptName' scriptName=EString)?
		('criticalValue' criticalValue=EFloatObject)?
		('benchmarkValue' benchmarkValue=EFloatObject)?
		('criticalValues' '(' criticalValues+=QualitativeValue ( "," criticalValues+=QualitativeValue)* ')' )?
		('benchmarkValues' '(' benchmarkValues+=QualitativeValue ( "," benchmarkValues+=QualitativeValue)* ')' )?
	'}';

QualitativeValueDictionary returns QualitativeValueDictionary:
	'Value'
	name=EString
	('<' lessThan=[QualitativeValueDictionary|EString])?
	('>' greaterThan=[QualitativeValueDictionary|EString])?
	;

Component returns Component:
	{Component}
	'Component'
	name=EString
	'{'
		( provides+=CapabilityProvision ( provides+=CapabilityProvision)* )?
		( upgrades+=CapabilityUpgrade ( upgrades+=CapabilityUpgrade)* )?
		( requires+=Capability ( requires+=Capability)* )?
		( costs+=Cost ( costs+=Cost)* )?
		( properties+=Measurement ( properties+=Measurement)* )?
	'}';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

Measurement returns Measurement:
	{Measurement}
	'Measurement'
	name=EString
	'{'
		('criticalValue' criticalValue=EFloatObject)?
		('benchmarkValue' benchmarkValue=EFloatObject)?
		('providedValue' providedValue=EFloatObject)?
		('criticalValues' '(' criticalValues+=QualitativeValue ( "," criticalValues+=QualitativeValue)* ')' )?
		('benchmarkValues' '(' benchmarkValues+=QualitativeValue ( "," benchmarkValues+=QualitativeValue)* ')' )?
		('providedValues' '(' providedValues+=QualitativeValue ( "," providedValues+=QualitativeValue)* ')' )?
		('aggregationType' aggregationType=EString)?
		('scriptName' scriptName=EString)?
		('aggregates' '(' aggregates+=[Measurement|EString] ( "," aggregates+=[Measurement|EString])* ')' )?
	'}';

EFloatObject returns ecore::EFloatObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

QualitativeValue returns QualitativeValue:
	{QualitativeValue}
	name=EString;

CapabilityUpgrade returns CapabilityUpgrade:
	{CapabilityUpgrade}
	'CapabilityUpgrade'
	name=EString
	'{'
		('targetComponent' targetComponent=EString)?
		(capabilityChanges+=CapabilityChange ( capabilityChanges+=CapabilityChange)* )?
	'}';

Cost returns Cost:
	{Cost}
	'Cost'
	name=EString
		(amount=EFloatObject)?
	;

CapabilityChange returns CapabilityChange:
	{CapabilityChange}
	'CapabilityChange'
	name=EString
	'{'
		( capabilities+=Capability ( capabilities+=Capability)* )?
	'}';


RunConfiguration returns RunConfiguration:
	RunConfiguration_Impl | FindCapability | FindTradeOffs | ThroughLifePlanning;

ComponentU returns ComponentU:
	Component_Impl | ExistingComponent | AcquirableComponent;

Constraint returns Constraint:
	Constraint_Impl | ConstraintNoMoreThan | ConstraintNoLessThan | DesireHigh | DesireLow;

RunConfiguration_Impl returns RunConfiguration:
	{RunConfiguration}
	'RunConfiguration'
	name=EString
	'{'
		('popSize' popSize=EIntegerObject)?
		('genCount' genCount=EIntegerObject)?
	'}';

EString returns ecore::EString:
	STRING | ID;

EIntegerObject returns ecore::EIntegerObject:
	'-'? INT;

FindCapability returns FindCapability:
	{FindCapability}
	'FindCapability'
	name=EString
	'{'
		('popSize' popSize=EIntegerObject)?
		('genCount' genCount=EIntegerObject)?
		(components+=ComponentU ( components+=ComponentU)* )?
	'}';

FindTradeOffs returns FindTradeOffs:
	{FindTradeOffs}
	'FindTradeOffs'
	name=EString
	'{'
		('popSize' popSize=EIntegerObject)?
		('genCount' genCount=EIntegerObject)?
		(components+=ComponentU ( components+=ComponentU)* )?
		(constraints+=Constraint ( constraints+=Constraint)* )?
	'}';

ThroughLifePlanning returns ThroughLifePlanning:
	{ThroughLifePlanning}
	'ThroughLifePlanning'
	name=EString
	'{'
		('popSize' popSize=EIntegerObject)?
		('genCount' genCount=EIntegerObject)?
		('throughLifeModel' throughLifeModel=EString)?
		('throughLifeCostModel' throughLifeCostModel=EString)?
	'}';

Component_Impl returns ComponentU:
	{ComponentU}
	'Component'
	name=EString
	'('
		(quantity=EIntegerObject)?
	')';

ExistingComponent returns ExistingComponent:
	{ExistingComponent}
	'ExistingComponent'
	name=EString
	'('
		(quantity=EIntegerObject)?
	')';

AcquirableComponent returns AcquirableComponent:
	{AcquirableComponent}
	'AcquirableComponent'
	name=EString
	'('
		(quantity=EIntegerObject)?
	')';

Constraint_Impl returns Constraint:
	{Constraint}
	'Constraint'
	;

ConstraintNoMoreThan returns ConstraintNoMoreThan:
	{ConstraintNoMoreThan}
	'ConstraintNoMoreThan'
	name=EString
	'{'
		('softLimit' softLimit=EDoubleObject)?
		('hardLimit' hardLimit=EDoubleObject)?
	'}';

ConstraintNoLessThan returns ConstraintNoLessThan:
	{ConstraintNoLessThan}
	'ConstraintNoLessThan'
	name=EString
	'{'
		('softLimit' softLimit=EDoubleObject)?
		('hardLimit' hardLimit=EDoubleObject)?
	'}';

DesireHigh returns DesireHigh:
	{DesireHigh}
	'DesireHigh'
	name=EString;

DesireLow returns DesireLow:
	{DesireLow}
	'DesireLow'
	name=EString;

EDoubleObject returns ecore::EDoubleObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

