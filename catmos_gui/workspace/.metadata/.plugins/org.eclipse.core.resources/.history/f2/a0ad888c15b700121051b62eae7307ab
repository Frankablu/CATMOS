/*
 * 
 */
package Scenario.diagram.part;

/**
 * @generated
 */
public class ValidateAction extends org.eclipse.jface.action.Action {
	
	/**
 * @generated
 */
	private org.eclipse.ui.IWorkbenchPage page;
	
	/**
 * @generated
 */
	public ValidateAction(org.eclipse.ui.IWorkbenchPage page) {
		setText(Scenario.diagram.part.Messages.ValidateActionMessage);
		this.page = page;
	}
	
	/**
 * @generated
 */
	public void run() {
		org.eclipse.ui.IWorkbenchPart workbenchPart = page.getActivePart();
		if (workbenchPart instanceof org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) {
			final org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart part =	(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) workbenchPart;
			try {
								new org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation(
									new org.eclipse.jface.operation.IRunnableWithProgress() {

						public void run(org.eclipse.core.runtime.IProgressMonitor monitor)
								throws InterruptedException, java.lang.reflect.InvocationTargetException {
							runValidation(part.getDiagramEditPart(), part.getDiagram());
						}
					}
								)
								.run(new org.eclipse.core.runtime.NullProgressMonitor());			
			} catch (Exception e) {
				Scenario.diagram.part.ScenarioDiagramEditorPlugin.getInstance().logError("Validation action failed", e); //$NON-NLS-1$
			}
		}
	}
	
	/**
 * @generated
 */
	public static void runValidation(org.eclipse.gmf.runtime.notation.View view) {
		try {
			if (Scenario.diagram.part.ScenarioDiagramEditorUtil.openDiagram(view.eResource())) {
				org.eclipse.ui.IEditorPart editorPart = org.eclipse.ui.PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getActivePage().getActiveEditor();
				if (editorPart instanceof org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) {
					runValidation(((org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) editorPart).
							getDiagramEditPart(), view);
				} else {
					runNonUIValidation(view);
				}
			}
		} catch (Exception e) {
			Scenario.diagram.part.ScenarioDiagramEditorPlugin.getInstance().logError(
					"Validation action failed", e);  //$NON-NLS-1$
		}
	}
	
	/**
 * @generated
 */
	public static void runNonUIValidation(org.eclipse.gmf.runtime.notation.View view) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart =
				org.eclipse.gmf.runtime.diagram.ui.OffscreenEditPartFactory.getInstance().createDiagramEditPart(
						view.getDiagram());
		runValidation(diagramEditPart, view);
	}		
	
	/**
 * @generated
 */
	public static void runValidation(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart, org.eclipse.gmf.runtime.notation.View view) {
		final org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart fpart = diagramEditPart;
		final org.eclipse.gmf.runtime.notation.View fview = view;
		org.eclipse.emf.transaction.TransactionalEditingDomain txDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(view);
		Scenario.diagram.providers.ScenarioValidationProvider.runWithConstraints(txDomain, new Runnable() {

			public void run() {
				validate(fpart, fview);
			}
		});
	}
	
	/**
 * @generated
 */
	private static org.eclipse.emf.common.util.Diagnostic runEMFValidator(
			org.eclipse.gmf.runtime.notation.View target) {
		if (target.isSetElement() && target.getElement() != null) {
			return new org.eclipse.emf.ecore.util.Diagnostician() {

				public String getObjectLabel(org.eclipse.emf.ecore.EObject eObject) {
					return org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(eObject, true);
				}
			}.validate(target.getElement());
		}
		return org.eclipse.emf.common.util.Diagnostic.OK_INSTANCE;
	}
	
	/**
 * @generated
 */
	private static void validate(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart,
			org.eclipse.gmf.runtime.notation.View view) {
				org.eclipse.core.resources.IFile target = view.eResource() != null ?
				org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(view.eResource()) : null;
		if (target != null) {
			Scenario.diagram.providers.ScenarioMarkerNavigationProvider.deleteMarkers(target);
		}
				org.eclipse.emf.common.util.Diagnostic diagnostic = runEMFValidator(view);
		createMarkers(target, diagnostic, diagramEditPart);
		org.eclipse.emf.validation.service.IBatchValidator validator =
				(org.eclipse.emf.validation.service.IBatchValidator)
						org.eclipse.emf.validation.service.ModelValidationService.getInstance().newValidator(
								org.eclipse.emf.validation.model.EvaluationMode.BATCH);
		validator.setIncludeLiveConstraints(true);
		if (view.isSetElement() && view.getElement() != null) {
			org.eclipse.core.runtime.IStatus status = validator.validate(view.getElement());
			createMarkers(target, status, diagramEditPart);
		}
			}
	
	/**
 * @generated
 */
	private static void createMarkers(
			org.eclipse.core.resources.IFile
			 target,
			org.eclipse.core.runtime.IStatus validationStatus,
			org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart) {
		if (validationStatus.isOK()) {
			return;
		}
		final org.eclipse.core.runtime.IStatus rootStatus = validationStatus;
		java.util.List allStatuses = new java.util.ArrayList();
		Scenario.diagram.part.ScenarioDiagramEditorUtil.LazyElement2ViewMap element2ViewMap = new Scenario.diagram.part.ScenarioDiagramEditorUtil.LazyElement2ViewMap(
						diagramEditPart.getDiagramView(),
						collectTargetElements(rootStatus, new java.util.HashSet<org.eclipse.emf.ecore.EObject>(), allStatuses));
		for (java.util.Iterator it = allStatuses.iterator(); it.hasNext();) {
			org.eclipse.emf.validation.model.IConstraintStatus nextStatus =
					(org.eclipse.emf.validation.model.IConstraintStatus) it.next();
			org.eclipse.gmf.runtime.notation.View view = Scenario.diagram.part.ScenarioDiagramEditorUtil.findView(
					diagramEditPart, nextStatus.getTarget(), element2ViewMap);			
			addMarker(diagramEditPart.getViewer(), target, view.eResource().getURIFragment(view), 
					org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(nextStatus.getTarget(), true), 
					nextStatus.getMessage(), nextStatus.getSeverity());
		}
	}
	
	/**
 * @generated
 */
	private static void createMarkers(
			org.eclipse.core.resources.IFile
			 target,
			org.eclipse.emf.common.util.Diagnostic emfValidationStatus,
			org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart) {
		if (emfValidationStatus.getSeverity() == org.eclipse.emf.common.util.Diagnostic.OK) {
			return;
		}
		final org.eclipse.emf.common.util.Diagnostic rootStatus = emfValidationStatus;
		java.util.List allDiagnostics = new java.util.ArrayList();
		Scenario.diagram.part.ScenarioDiagramEditorUtil.LazyElement2ViewMap element2ViewMap =
				new Scenario.diagram.part.ScenarioDiagramEditorUtil.LazyElement2ViewMap(
						diagramEditPart.getDiagramView(),
						collectTargetElements(rootStatus, new java.util.HashSet<org.eclipse.emf.ecore.EObject>(), allDiagnostics));
		for (java.util.Iterator it = emfValidationStatus.getChildren().iterator(); it.hasNext();) {
			org.eclipse.emf.common.util.Diagnostic nextDiagnostic = (org.eclipse.emf.common.util.Diagnostic) it.next();
			java.util.List data = nextDiagnostic.getData();
			if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
				org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) data.get(0);
				org.eclipse.gmf.runtime.notation.View view = Scenario.diagram.part.ScenarioDiagramEditorUtil.findView(
						diagramEditPart, element, element2ViewMap);
				addMarker(diagramEditPart.getViewer(), target, view.eResource().getURIFragment(view),
						org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(element, true),
						nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));
			}
		}
	}
	
	/**
 * @generated
 */
	private static void addMarker(org.eclipse.gef.EditPartViewer viewer,
			org.eclipse.core.resources.IFile
			 target,
			String elementId, String location, String message, int statusSeverity) {
		if (target == null) {
			return;
		}
				Scenario.diagram.providers.ScenarioMarkerNavigationProvider.addMarker(
				target, elementId, location, message, statusSeverity);
			}
	
	/**
 * @generated
 */
	private static int diagnosticToStatusSeverity(int diagnosticSeverity) {
		if (diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.OK) {
			return org.eclipse.core.runtime.IStatus.OK;
		} else if (diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.INFO) {
			return org.eclipse.core.runtime.IStatus.INFO;
		} else if (diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.WARNING) {
			return org.eclipse.core.runtime.IStatus.WARNING;
		} else if (diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.ERROR
				|| diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.CANCEL) {
			return org.eclipse.core.runtime.IStatus.ERROR;
		}
		return org.eclipse.core.runtime.IStatus.INFO;
	}
	
	/**
 * @generated
 */
	private static java.util.Set<org.eclipse.emf.ecore.EObject> collectTargetElements(org.eclipse.core.runtime.IStatus status,
			java.util.Set<org.eclipse.emf.ecore.EObject> targetElementCollector, java.util.List allConstraintStatuses) {
		if (status instanceof org.eclipse.emf.validation.model.IConstraintStatus) {
			targetElementCollector.add(((org.eclipse.emf.validation.model.IConstraintStatus) status).getTarget());
			allConstraintStatuses.add(status);
		}
		if (status.isMultiStatus()) {
			org.eclipse.core.runtime.IStatus[] children = status.getChildren();
			for (int i = 0; i < children.length; i++) {
				collectTargetElements(children[i], targetElementCollector, allConstraintStatuses);				
			}
		}
		return targetElementCollector;
	}
	
	/**
 * @generated
 */
	private static java.util.Set<org.eclipse.emf.ecore.EObject> collectTargetElements(org.eclipse.emf.common.util.Diagnostic diagnostic,
			java.util.Set<org.eclipse.emf.ecore.EObject> targetElementCollector, java.util.List allDiagnostics) {
		java.util.List data = diagnostic.getData();
		org.eclipse.emf.ecore.EObject target = null;
		if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
			target = (org.eclipse.emf.ecore.EObject) data.get(0);
			targetElementCollector.add(target);	
			allDiagnostics.add(diagnostic);
		}
		if (diagnostic.getChildren() != null && !diagnostic.getChildren().isEmpty()) {
			for (java.util.Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {
				collectTargetElements((org.eclipse.emf.common.util.Diagnostic) it.next(),
						targetElementCollector, allDiagnostics);
			}
		}
		return targetElementCollector;
	}
	}
