	/*
 * 
 */
package ScenarioModel.diagram.navigator;

	/**
 * @generated
 */
public class ScenarioModelNavigatorGroup extends ScenarioModel.diagram.navigator.ScenarioModelAbstractNavigatorItem {

		/**
 * @generated
 */
private String myGroupName;
	
	/**
 * @generated
 */
private String myIcon;
	
	/**
 * @generated
 */
private java.util.Collection myChildren = new java.util.LinkedList();

		/**
 * @generated
 */
ScenarioModelNavigatorGroup(String groupName, String icon, Object parent) {
	super(parent);
	myGroupName = groupName;
	myIcon = icon;
}
	
		/**
 * @generated
 */
public String getGroupName() {
	return myGroupName;
}
	
		/**
 * @generated
 */
public String getIcon() {
	return myIcon;
}
	
		/**
 * @generated
 */
public Object[] getChildren() {
	return myChildren.toArray();
}
	
		/**
 * @generated
 */
public void addChildren(java.util.Collection children) {
	myChildren.addAll(children);
}
	
		/**
 * @generated
 */
public void addChild(Object child) {
	myChildren.add(child);
}
	
		/**
 * @generated
 */
public boolean isEmpty() {
	return myChildren.size() == 0;
}
	
		/**
 * @generated
 */
public boolean equals(Object obj) {
	if (obj instanceof ScenarioModel.diagram.navigator.ScenarioModelNavigatorGroup) {
		ScenarioModel.diagram.navigator.ScenarioModelNavigatorGroup anotherGroup = (ScenarioModel.diagram.navigator.ScenarioModelNavigatorGroup) obj;
		if (getGroupName().equals(anotherGroup.getGroupName())) {
			return getParent().equals(anotherGroup.getParent());
		}
	}
	return super.equals(obj);
}
	
		/**
 * @generated
 */
public int hashCode() {
	return getGroupName().hashCode();
}

	}
